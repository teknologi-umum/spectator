// @generated by protobuf-ts 2.2.2 with parameter server_none,client_grpc1,generate_dependencies,optimize_code_size,add_pb_suffix
// @generated from protobuf file "logger.proto" (package "logger", syntax proto3)
// tslint:disable
import { Logger } from "./logger_pb";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { Healthcheck } from "./logger_pb";
import type { EmptyRequest } from "./logger_pb";
import type { ReadLogResponse } from "./logger_pb";
import type { ReadLogRequest } from "./logger_pb";
import type { EmptyResponse } from "./logger_pb";
import type { LogRequest } from "./logger_pb";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service logger.Logger
 */
export interface ILoggerClient {
    /**
     * @generated from protobuf rpc: CreateLog(logger.LogRequest) returns (logger.EmptyResponse);
     */
    createLog(input: LogRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EmptyResponse) => void): grpc.ClientUnaryCall;
    createLog(input: LogRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: EmptyResponse) => void): grpc.ClientUnaryCall;
    createLog(input: LogRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: EmptyResponse) => void): grpc.ClientUnaryCall;
    createLog(input: LogRequest, callback: (err: grpc.ServiceError | null, value?: EmptyResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ReadLog(logger.ReadLogRequest) returns (logger.ReadLogResponse);
     */
    readLog(input: ReadLogRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ReadLogResponse) => void): grpc.ClientUnaryCall;
    readLog(input: ReadLogRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ReadLogResponse) => void): grpc.ClientUnaryCall;
    readLog(input: ReadLogRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ReadLogResponse) => void): grpc.ClientUnaryCall;
    readLog(input: ReadLogRequest, callback: (err: grpc.ServiceError | null, value?: ReadLogResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Ping(logger.EmptyRequest) returns (logger.Healthcheck);
     */
    ping(input: EmptyRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Healthcheck) => void): grpc.ClientUnaryCall;
    ping(input: EmptyRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Healthcheck) => void): grpc.ClientUnaryCall;
    ping(input: EmptyRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Healthcheck) => void): grpc.ClientUnaryCall;
    ping(input: EmptyRequest, callback: (err: grpc.ServiceError | null, value?: Healthcheck) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service logger.Logger
 */
export class LoggerClient extends grpc.Client implements ILoggerClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: CreateLog(logger.LogRequest) returns (logger.EmptyResponse);
     */
    createLog(input: LogRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EmptyResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: EmptyResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: EmptyResponse) => void)): grpc.ClientUnaryCall {
        const method = Logger.methods[0];
        return this.makeUnaryRequest<LogRequest, EmptyResponse>(`/${Logger.typeName}/${method.name}`, (value: LogRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): EmptyResponse => method.O.fromBinary(value, this._binaryOptions), input, metadata as any, options as any, callback as any);
    }
    /**
     * @generated from protobuf rpc: ReadLog(logger.ReadLogRequest) returns (logger.ReadLogResponse);
     */
    readLog(input: ReadLogRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ReadLogResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ReadLogResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ReadLogResponse) => void)): grpc.ClientUnaryCall {
        const method = Logger.methods[1];
        return this.makeUnaryRequest<ReadLogRequest, ReadLogResponse>(`/${Logger.typeName}/${method.name}`, (value: ReadLogRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ReadLogResponse => method.O.fromBinary(value, this._binaryOptions), input, metadata as any, options as any, callback as any);
    }
    /**
     * @generated from protobuf rpc: Ping(logger.EmptyRequest) returns (logger.Healthcheck);
     */
    ping(input: EmptyRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Healthcheck) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Healthcheck) => void), callback?: ((err: grpc.ServiceError | null, value?: Healthcheck) => void)): grpc.ClientUnaryCall {
        const method = Logger.methods[2];
        return this.makeUnaryRequest<EmptyRequest, Healthcheck>(`/${Logger.typeName}/${method.name}`, (value: EmptyRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Healthcheck => method.O.fromBinary(value, this._binaryOptions), input, metadata as any, options as any, callback as any);
    }
}
