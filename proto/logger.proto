syntax = "proto3";

option go_package = "spectator/proto/logger";
option csharp_namespace = "Spectator.Protos.Logger";

package logger;

option go_package = "logger_proto";

service Logger {
    rpc CreateLog(LogRequest) returns (EmptyResponse);
    rpc ReadLog(ReadLogRequest) returns (ReadLogResponse);
    rpc Ping(EmptyRequest) returns (Healthcheck);
}

message EmptyResponse {}

message EmptyRequest {}

enum Level {
    DEBUG = 0;
    INFO = 1;
    WARNING = 2;
    ERROR = 3;
    CRITICAL = 4;
}

enum Environment {
    UNSET = 0;
    DEVELOPMENT = 1;
    TESTING = 2;
    STAGING = 3;
    PRODUCTION = 4;
}

message LogData {
    string request_id = 1;
    string application = 2;
    string message = 3;
    optional Level level = 4;
    optional Environment environment = 5;
    optional string language = 6;
    map<string, string> body = 7;
    // timestamp follows unix millisecond timestamp
    optional int64 timestamp = 8;
}

message LogRequest {
    string access_token = 1;
    LogData data = 2;
}

message Healthcheck {
    string status = 1;
}

message ReadLogRequest {
    optional Level level = 1;
    optional string request_id = 2;
    optional string application = 3;
    // timestamp_from is in unix millisecond format
    optional int64 timestamp_from = 4;
    // timestamp_to is in unix millisecond format
    optional int64 timestamp_to = 5;
}

message ReadLogResponse {
    repeated LogData data = 1;
}
