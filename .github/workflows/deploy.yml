name: Deploy

on:
  push:
    branches: ["master"]

jobs:
  backend:
    name: Backend check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Restore dependencies
        run: dotnet restore Spectator.sln
      - name: Build
        run: dotnet build --no-restore --configuration Release Spectator.sln
      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal Spectator.sln /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

  logger:
    name: Logger
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./logger
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic
        env:
          ACCESS_TOKEN: testing
          INFLUX_URL: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd

  video:
    name: Video
    runs-on: ubuntu-latest
    container: golang:1.18-bullseye
    timeout-minutes: 30
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: iKPpruHfaXygrwSV
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./video
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install requirements
        run: >
          apt-get update &&
          apt-get upgrade -y &&
          apt-get install -y curl tar gzip bzip2 autoconf automake build-essential gcc g++ cmake git-core
          libass-dev libfreetype6-dev libgnutls28-dev libmp3lame-dev libsdl2-dev libtool
          libva-dev libvdpau-dev libvorbis-dev libxcb1-dev libxcb-shm0-dev libxcb-xfixes0-dev
          pkg-config texinfo wget yasm zlib1g-dev python3 python3-pip python3-setuptools python3-wheel
      - name: Install ninja
        run: >
          mkdir -p /setup/ninja &&
          cd /setup/ninja &&
          curl -LO https://github.com/ninja-build/ninja/archive/refs/tags/v1.11.0.tar.gz &&
          tar -zxf v1.11.0.tar.gz &&
          cd ninja-1.11.0 &&
          python3 configure.py --bootstrap &&
          cp -v ninja /usr/bin/ninja
      - name: Install meson
        run: >
          mkdir -p /setup/meson &&
          cd /setup/meson &&
          curl -LO https://github.com/mesonbuild/meson/releases/download/0.63.0/meson-0.63.0.tar.gz &&
          tar -zxf meson-0.63.0.tar.gz &&
          cd meson-0.63.0 &&
          ./packaging/create_zipapp.py --outfile meson --interpreter '/usr/bin/env python3' . &&
          cp -v meson /usr/bin/meson &&
          mkdir -vp ~/.local/bin &&
          cp -v meson ~/.local/bin/meson
      - name: Install nasm
        run: >
          mkdir -p /setup/nasm &&
          cd /setup/nasm &&
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/nasm-2.15.05.tar.bz2 &&
          tar xjvf nasm-2.15.05.tar.bz2 &&
          cd nasm-2.15.05 &&
          ./autogen.sh &&
          ./configure --prefix="/usr" --bindir="/usr/bin" &&
          make &&
          make install
      - name: Install x264
        run: >
          mkdir -p /setup/x264 &&
          cd /setup/x264 &&
          git -C x264 pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/x264.git &&
          cd x264 &&
          PKG_CONFIG_PATH="/usr/lib/pkgconfig" ./configure --prefix="/usr" --bindir="/usr/bin" --enable-static --enable-pic &&
          make &&
          make install
      - name: Install x265
        run: >
          mkdir -p /setup/x265 &&
          cd /setup/x265 &&
          apt-get install -y libnuma-dev &&
          wget -O x265.tar.bz2 https://bitbucket.org/multicoreware/x265_git/get/master.tar.bz2 &&
          tar xjvf x265.tar.bz2 &&
          cd multicoreware*/build/linux &&
          cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="/usr" -DENABLE_SHARED=off ../../source &&
          make &&
          make install
      - name: Install vpx
        run: >
          mkdir -p /setup/libvpx &&
          cd /setup/libvpx &&
          git -C libvpx pull 2> /dev/null || git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git &&
          cd libvpx &&
          ./configure --prefix="/usr" --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm &&
          make &&
          make install
      - name: Install opus
        run: >
          mkdir -p /setup/opus &&
          cd /setup/opus &&
          git -C opus pull 2> /dev/null || git clone --depth 1 https://github.com/xiph/opus.git &&
          cd opus &&
          ./autogen.sh &&
          ./configure --prefix="/usr" --disable-shared &&
          make &&
          make install
      - name: Install vmaf
        run: >
          mkdir -p /setup/vmaf &&
          cd /setup/vmaf &&
          wget https://github.com/Netflix/vmaf/archive/v2.1.1.tar.gz &&
          tar xvf v2.1.1.tar.gz &&
          mkdir -p vmaf-2.1.1/libvmaf/build &&
          cd vmaf-2.1.1/libvmaf/build &&
          meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "/usr" --bindir="/usr/bin" --libdir="/usr/lib" &&
          ninja &&
          ninja install
      - name: Install dav1d
        run: >
          mkdir -p /setup/dav1d &&
          cd /setup/dav1d &&
          git -C dav1d pull 2> /dev/null || git clone --depth 1 https://code.videolan.org/videolan/dav1d.git &&
          mkdir -p dav1d/build &&
          cd dav1d/build &&
          meson setup -Denable_tools=false -Denable_tests=false --default-library=static .. --prefix "/usr" --libdir="/usr/lib" &&
          ninja &&
          ninja install
      - name: Install ffmpeg
        run: >
          apt-get install -y gnutls-bin libgnutls30 libunistring-dev &&
          wget -O ffmpeg-5.1.tar.bz2 https://ffmpeg.org/releases/ffmpeg-5.1.tar.bz2 &&
          tar xjvf ffmpeg-5.1.tar.bz2 &&
          cd ffmpeg-5.1 &&
          PKG_CONFIG_PATH="/usr/lib/pkgconfig" LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH ./configure
          --prefix="/usr"
          --pkg-config-flags="--static"
          --extra-cflags="-I/usr/bin/include"
          --extra-ldflags="-L/usr/bin/lib"
          --extra-libs="-lpthread -lm"
          --ld="g++"
          --bindir="/usr/bin"
          --enable-gpl
          --enable-gnutls
          --enable-libass
          --enable-libfreetype
          --enable-libmp3lame
          --enable-libopus
          --enable-libdav1d
          --enable-libvorbis
          --enable-libvpx
          --enable-libx264
          --enable-libx265 &&
          make &&
          make install &&
          hash -r
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          INFLUX_HOST: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: iKPpruHfaXygrwSV
          MINIO_HOST: bucket:9000
          MINIO_ACCESS_ID: teknum
          MINIO_SECRET_KEY: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          MINIO_TOKEN: ""
          LOGGER_SERVER_ADDRESS: http://logger:9000/
          LOGGER_SERVER_TOKEN: testing

  worker:
    name: Worker
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      bucket:
        image: minio/minio:edge-cicd
        env:
          MINIO_ROOT_USER: teknum
          MINIO_ROOT_PASSWORD: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          MINIO_ACCESS_KEY: diPj59zJzm2kwUZxcg5QRAUtpbVx5Uxd
          MINIO_SECRET_KEY: xLxBHSp2vAdX2TJSy6EptamrNk5ZXzXo
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://bucket:9000/minio/health/live"
          --health-interval 45s
          --health-timeout 30s
          --health-retries 10
          --health-start-period 120s
        volumes:
          - minio-data:/data
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: iKPpruHfaXygrwSV
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          INFLUX_HOST: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: iKPpruHfaXygrwSV
          MINIO_HOST: bucket:9000
          MINIO_ACCESS_ID: teknum
          MINIO_SECRET_KEY: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          LOGGER_SERVER_ADDRESS: http://logger:9000/
          LOGGER_SERVER_TOKEN: testing
          MINIO_TOKEN: ""

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install
      - name: Protoc
        run: npm run protoc
      - name: Lint
        run: npm run lint:check
      - name: Build
        run: npm run build:prod
      - name: Test
        run: npm run test:coverage

  rce:
    name: RCE
    runs-on: ubuntu-latest
    container: node:16.15-bullseye
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install
      - name: Setup directory
        run: mkdir -p /code/$(whoami)
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npx eslint --ext .ts,.js,.cjs .
      - name: Build
        run: npm run build
      - name: Test & coverage
        run: npm run test
        env:
          CI: true

  configs:
    name: Verify config
    runs-on: ubuntu-latest
    container: python:3.10
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install docker-compose
        run: >
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          && chmod +x /usr/local/bin/docker-compose
          && docker-compose --version
      - name: Install ansible-lint
        run: >
          pip install ansible
          && pip3 install "ansible-lint[core,yamllint]"
          && ansible-lint --version
      - name: Lint docker-compose
        run: >
          docker-compose --file docker-compose.yml config
          && docker-compose --file docker-compose.dev.yml config
          && docker-compose --file docker-compose.influx.yml config
          && docker-compose --file docker-compose.caddy.yml config
          && docker-compose --file docker-compose.minio.yml config
          && docker-compose --file docker-compose.override.yml config
      - name: Lint ansible
        run: ansible-lint -v -f rich ansible.yml

  assertion:
    name: Assertion
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./assertion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.x"
          coverage: none
      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 9
      - name: Run tests
        run: julia tests/runner.jl ./tests

  # deploy:
  #   name: Deploy
  #   needs: [configs, frontend, logger, backend, worker]
  #   container: python:3.10
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - name: Install SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_KEY }}
  #         name: id_ed25519
  #         known_hosts: ${{ secrets.SSH_IP }}
  #         if_key_exists: replace
  #     - name: Install ansible
  #       run: >
  #         pip install ansible
  #         && ansible-playbook --version
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Add SSH IP address
  #       run: echo "${{ secrets.SSH_IP }}" >> inventory
  #     - name: SSH Keyscan
  #       run: ssh-keyscan -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts
  #     - name: Run ansible
  #       env:
  #         SSH_IP: ${{ secrets.SSH_IP }}
  #         SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  #         SSH_KEY: ${{ secrets.SSH_KEY }}
  #         GITHUB_TOKEN: ${{ github.token }}
  #         GITHUB_SHA: ${{ github.sha }}
  #         GITHUB_REF: ${{ github.ref }}
  #       run: >
  #         ansible-playbook
  #         -v
  #         --inventory inventory
  #         --private-key /root/.ssh/id_ed25519
  #         --user ${{ secrets.SSH_USERNAME }}
  #         ansible.yml
