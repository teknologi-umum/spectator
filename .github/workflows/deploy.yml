name: Deploy

on:
  push:
    branches: ["master"]

jobs:
  backend:
    name: Backend check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Restore dependencies
        run: dotnet restore Spectator.sln
      - name: Build
        run: dotnet build --no-restore --configuration Release Spectator.sln
      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal Spectator.sln /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov

  logger:
    name: Logger
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./logger
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic
        env:
          ACCESS_TOKEN: testing
          INFLUX_URL: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd

  video:
    name: Video
    runs-on: ubuntu-latest
    container: golang:1.18-bullseye
    timeout-minutes: 30
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: iKPpruHfaXygrwSV
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./video
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install requirements
        run: >
          apt-get update &&
          apt-get upgrade -y &&
          apt-get install -y curl build-essential pkg-config &&
          apt-get install -y ffmpeg libvpx-dev libvpx6 vpx-tools libopus-dev libx264-dev libbz2-dev liblzma-dev libvidstab-dev libx265-dev
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          INFLUX_HOST: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: iKPpruHfaXygrwSV
          MINIO_HOST: bucket:9000
          MINIO_ACCESS_ID: teknum
          MINIO_SECRET_KEY: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          MINIO_TOKEN: ""
          LOGGER_SERVER_ADDRESS: http://logger:9000/
          LOGGER_SERVER_TOKEN: testing

  worker:
    name: Worker
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      bucket:
        image: minio/minio:edge-cicd
        env:
          MINIO_ROOT_USER: teknum
          MINIO_ROOT_PASSWORD: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          MINIO_ACCESS_KEY: diPj59zJzm2kwUZxcg5QRAUtpbVx5Uxd
          MINIO_SECRET_KEY: xLxBHSp2vAdX2TJSy6EptamrNk5ZXzXo
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://bucket:9000/minio/health/live"
          --health-interval 45s
          --health-timeout 30s
          --health-retries 10
          --health-start-period 120s
        volumes:
          - minio-data:/data
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: iKPpruHfaXygrwSV
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic -race ./...
        env:
          ENVIRONMENT: github-actions
          INFLUX_HOST: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: iKPpruHfaXygrwSV
          MINIO_HOST: bucket:9000
          MINIO_ACCESS_ID: teknum
          MINIO_SECRET_KEY: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          LOGGER_SERVER_ADDRESS: http://logger:9000/
          LOGGER_SERVER_TOKEN: testing
          MINIO_TOKEN: ""

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install
      - name: Protoc
        run: npm run protoc
      - name: Lint
        run: npm run lint:check
      - name: Build
        run: npm run build:prod
      - name: Test
        run: npm run test:coverage

  rce:
    name: RCE
    runs-on: ubuntu-latest
    container: node:16.15-bullseye
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install
      - name: Setup directory
        run: mkdir -p /code/$(whoami)
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npx eslint --ext .ts,.js,.cjs .
      - name: Build
        run: npm run build
      - name: Test & coverage
        run: npm run test
        env:
          CI: true

  configs:
    name: Verify config
    runs-on: ubuntu-latest
    container: python:3.10
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install docker-compose
        run: >
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          && chmod +x /usr/local/bin/docker-compose
          && docker-compose --version
      - name: Install ansible-lint
        run: >
          pip install ansible
          && pip3 install "ansible-lint[core,yamllint]"
          && ansible-lint --version
      - name: Lint docker-compose
        run: >
          docker-compose --file docker-compose.yml config
          && docker-compose --file docker-compose.dev.yml config
          && docker-compose --file docker-compose.influx.yml config
          && docker-compose --file docker-compose.caddy.yml config
          && docker-compose --file docker-compose.minio.yml config
      - name: Lint ansible
        run: ansible-lint -v -f rich ansible.yml

  assertion:
    name: Assertion
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./assertion
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Julia
        uses: julia-actions/setup-julia@v1
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.x"
          coverage: none
      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 9
      - name: Run tests
        run: julia tests/runner.jl ./tests

  deploy:
    name: Deploy
    needs: [backend, logger, video, rce, worker, frontend, configs, assertion]
    container: python:3.10
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Requirements
        run: apt-get update && apt-get install -y ssh
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_IP }}
          if_key_exists: replace
      - name: SSH Keyscan
        run: ssh-keyscan -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts
      - name: Execute commands
        run: >
          ssh
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh spectator '\"'tmux new -d -t 0 -e 'echo ${{ secrets.SUDO_PASSWORD }} | sudo -S bash -c '\''cd ${{ secrets.SSH_WORKDIR }} &&
          git remote set-url origin https://${{ github.actor }}:${{ github.token }}@github.com/teknologi-umum/spectator.git &&
          git pull &&
          git remote set-url origin https://github.com/teknologi-umum/spectator.git &&
          docker compose -f docker-compose.override.yml up -d --build backend worker rce video logger
          '\'' ' '\"'  "
