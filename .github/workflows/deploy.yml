name: Deploy

on:
  push:
    branches: ["master"]

jobs:
  backend:
    name: Backend check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Restore dependencies
        run: dotnet restore Spectator.sln
      - name: Build
        run: dotnet build --no-restore --configuration Release Spectator.sln
      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal Spectator.sln /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=lcov
  logger:
    name: Logger
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./logger
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic
        env:
          ACCESS_TOKEN: testing
          INFLUX_URL: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: nMfrRYVcTyqFwDARAdqB92Ywj6GNMgPEd
  worker:
    name: Worker
    runs-on: ubuntu-latest
    container: golang:1.18
    timeout-minutes: 5
    services:
      db:
        image: influxdb:2.3.0
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: public
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: iKPpruHfaXygrwSV
        ports:
          - 8086:8086
        options: >-
          --health-cmd "influx ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    defaults:
      run:
        working-directory: ./worker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build test
        run: go build .
      - name: Run test
        run: go test -v -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: github-actions
          INFLUX_HOST: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: iKPpruHfaXygrwSV
          MINIO_HOST: bucket:9000
          MINIO_ACCESS_ID: teknum
          MINIO_SECRET_KEY: c2N9Xz8bzHPkgNcgDtKgwGPTdb76GjD48
          LOGGER_SERVER_ADDRESS: http://logger:9000/
          LOGGER_SERVER_TOKEN: testing
          MINIO_TOKEN: ""
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install
      - name: Protoc
        run: npm run protoc
      - name: Lint
        run: npm run lint:check
      - name: Build
        run: npm run build:prod
      - name: Test
        run: npm run test:coverage
  rce:
    name: RCE
    runs-on: ubuntu-latest
    container: node:16.15-bullseye
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./rce
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup packages && nosocket
        run: >
          apt-get update &&
          apt-get install -y coreutils binutils build-essential libseccomp-dev gcc apt-utils &&
          make -C ./nosocket/ all && make -C ./nosocket/ install
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npx eslint --ext .ts,.js,.cjs .
      - name: Build
        run: npm run build
      - name: Test & coverage
        run: npm run test
  # configs:
  #   name: Verify config
  #   runs-on: ubuntu-latest
  #   container: python:3.10
  #   timeout-minutes: 5
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Install docker-compose
  #       run: >
  #         curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #         && chmod +x /usr/local/bin/docker-compose
  #         && docker-compose --version
  #     - name: Install ansible-lint
  #       run: >
  #         pip install ansible
  #         && pip3 install "ansible-lint[core,yamllint]"
  #         && ansible-lint --version
  #     - name: Lint docker-compose
  #       run: >
  #         docker-compose --file docker-compose.yml config
  #         && docker-compose --file docker-compose.dev.yml config
  #         && docker-compose --file docker-compose.influx.yml config
  #     - name: Lint ansible
  #       run: ansible-lint -v -f rich ansible.yml
  # deploy:
  #   name: Deploy
  #   needs: [configs, frontend, logger, backend, worker]
  #   container: python:3.10
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - name: Install SSH key
  #       uses: shimataro/ssh-key-action@v2
  #       with:
  #         key: ${{ secrets.SSH_KEY }}
  #         name: id_ed25519
  #         known_hosts: ${{ secrets.SSH_IP }}
  #         if_key_exists: replace
  #     - name: Install ansible
  #       run: >
  #         pip install ansible
  #         && ansible-playbook --version
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Add SSH IP address
  #       run: echo "${{ secrets.SSH_IP }}" >> inventory
  #     - name: SSH Keyscan
  #       run: ssh-keyscan -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts
  #     - name: Run ansible
  #       env:
  #         SSH_IP: ${{ secrets.SSH_IP }}
  #         SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
  #         SSH_KEY: ${{ secrets.SSH_KEY }}
  #         GITHUB_TOKEN: ${{ github.token }}
  #         GITHUB_SHA: ${{ github.sha }}
  #         GITHUB_REF: ${{ github.ref }}
  #       run: >
  #         ansible-playbook
  #         -v
  #         --inventory inventory
  #         --private-key /root/.ssh/id_ed25519
  #         --user ${{ secrets.SSH_USERNAME }}
  #         ansible.yml
