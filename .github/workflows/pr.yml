name: Check

on:
  pull_request:
    branches: ["*"]

jobs:
  # backend:
  #   name: Backend
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   services:
  #     db:
  #       image: influxdb:2.1
  #       env:
  #         DOCKER_INFLUXDB_INIT_USERNAME: teknum
  #         DOCKER_INFLUXDB_INIT_PASSWORD: P@ssw0rd!
  #         DOCKER_INFLUXDB_INIT_ORG: teknologi
  #         DOCKER_INFLUXDB_INIT_BUCKET: spectator
  #       ports:
  #         - 8086:8086
  #   defaults:
  #     run:
  #       working-directory: ./backend
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: 6.0.100
  #     - name: Restore dependencies
  #       run: dotnet restore
  #     - name: Build
  #       run: dotnet build --no-restore
  #     - name: Test
  #       run: dotnet test --no-build --verbosity normal
  logger:
    name: Logger
    runs-on: ubuntu-latest
    container: python:3.9.6-buster
    timeout-minutes: 10
    services:
      db:
        image: influxdb:2.1
        env:
          DOCKER_INFLUXDB_INIT_USERNAME: root
          DOCKER_INFLUXDB_INIT_PASSWORD: password
          DOCKER_INFLUXDB_INIT_ORG: teknologi
          DOCKER_INFLUXDB_INIT_BUCKET: log
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: testing
        ports:
          - 8086:8086
    defaults:
      run:
        working-directory: ./logger
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: "1.1.12"
      - name: Install dependencies
        run: >
          poetry config virtualenvs.create true \
          && poetry install
      - name: Run lint
        run: poetry run pylint logger
      - name: Run test
        run: poetry run pytest
        env:
          ACCESS_TOKEN: testing
          INFLUX_URL: http://db:8086/
          INFLUX_ORG: teknologi
          INFLUX_TOKEN: testing
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    container: node:16-buster
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Lint
        run: npm run lint:check
      - name: Build
        run: npm run build:prod
  devops:
    name: Verify config
    runs-on: ubuntu-latest
    container: python:3-buster
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install docker-compose
        run: >
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          && chmod +x /usr/local/bin/docker-compose
          && docker-compose --version
      - name: Install ansible-lint
        run: >
          pip install ansible
          && pip3 install "ansible-lint[core,yamllint]"
          && ansible-lint --version
      - name: Lint docker-compose
        run: docker-compose --file docker-compose.yml config
      - name: Lint ansible
        run: ansible-lint -v -f rich ansible.yml
