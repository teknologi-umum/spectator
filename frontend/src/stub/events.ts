// @generated by protobuf-ts 2.1.0
// @generated from protobuf file "events.proto" (package "events", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Direction } from "./enums";
import { MouseButton } from "./enums";
/**
 * @generated from protobuf message events.MouseClickRequest
 */
export interface MouseClickRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 question_number = 2;
     */
    questionNumber: number;
    /**
     * @generated from protobuf field: enums.MouseButton button = 3;
     */
    button: MouseButton;
    /**
     * @generated from protobuf field: int64 time = 4;
     */
    time: bigint;
}
/**
 * @generated from protobuf message events.MouseMoveRequest
 */
export interface MouseMoveRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 question_number = 2;
     */
    questionNumber: number;
    /**
     * @generated from protobuf field: enums.Direction direction = 3;
     */
    direction: Direction;
    /**
     * @generated from protobuf field: int32 x_position = 4;
     */
    xPosition: number;
    /**
     * @generated from protobuf field: int32 y_position = 5;
     */
    yPosition: number;
    /**
     * @generated from protobuf field: int32 window_width = 6;
     */
    windowWidth: number;
    /**
     * @generated from protobuf field: int32 window_height = 7;
     */
    windowHeight: number;
    /**
     * @generated from protobuf field: int64 time = 8;
     */
    time: bigint;
}
/**
 * @generated from protobuf message events.MouseScrollRequest
 */
export interface MouseScrollRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int64 time = 2;
     */
    time: bigint;
}
/**
 * @generated from protobuf message events.KeystrokeRequest
 */
export interface KeystrokeRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 question_number = 2;
     */
    questionNumber: number;
    /**
     * @generated from protobuf field: string key_char = 3;
     */
    keyChar: string;
    /**
     * @generated from protobuf field: bool shift = 4;
     */
    shift: boolean;
    /**
     * @generated from protobuf field: bool alt = 5;
     */
    alt: boolean;
    /**
     * @generated from protobuf field: bool control = 6;
     */
    control: boolean;
    /**
     * @generated from protobuf field: bool meta = 7;
     */
    meta: boolean;
    /**
     * @generated from protobuf field: bool unrelated_key = 8;
     */
    unrelatedKey: boolean;
    /**
     * @generated from protobuf field: int64 time = 9;
     */
    time: bigint;
}
/**
 * @generated from protobuf message events.EventReply
 */
export interface EventReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MouseClickRequest$Type extends MessageType<MouseClickRequest> {
    constructor() {
        super("events.MouseClickRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "question_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "button", kind: "enum", T: () => ["enums.MouseButton", MouseButton] },
            { no: 4, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MouseClickRequest>): MouseClickRequest {
        const message = { accessToken: "", questionNumber: 0, button: 0, time: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MouseClickRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MouseClickRequest): MouseClickRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 question_number */ 2:
                    message.questionNumber = reader.int32();
                    break;
                case /* enums.MouseButton button */ 3:
                    message.button = reader.int32();
                    break;
                case /* int64 time */ 4:
                    message.time = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MouseClickRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 question_number = 2; */
        if (message.questionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionNumber);
        /* enums.MouseButton button = 3; */
        if (message.button !== 0)
            writer.tag(3, WireType.Varint).int32(message.button);
        /* int64 time = 4; */
        if (message.time !== 0n)
            writer.tag(4, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.MouseClickRequest
 */
export const MouseClickRequest = new MouseClickRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MouseMoveRequest$Type extends MessageType<MouseMoveRequest> {
    constructor() {
        super("events.MouseMoveRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "question_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "direction", kind: "enum", T: () => ["enums.Direction", Direction] },
            { no: 4, name: "x_position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "y_position", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "window_width", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "window_height", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MouseMoveRequest>): MouseMoveRequest {
        const message = { accessToken: "", questionNumber: 0, direction: 0, xPosition: 0, yPosition: 0, windowWidth: 0, windowHeight: 0, time: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MouseMoveRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MouseMoveRequest): MouseMoveRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 question_number */ 2:
                    message.questionNumber = reader.int32();
                    break;
                case /* enums.Direction direction */ 3:
                    message.direction = reader.int32();
                    break;
                case /* int32 x_position */ 4:
                    message.xPosition = reader.int32();
                    break;
                case /* int32 y_position */ 5:
                    message.yPosition = reader.int32();
                    break;
                case /* int32 window_width */ 6:
                    message.windowWidth = reader.int32();
                    break;
                case /* int32 window_height */ 7:
                    message.windowHeight = reader.int32();
                    break;
                case /* int64 time */ 8:
                    message.time = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MouseMoveRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 question_number = 2; */
        if (message.questionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionNumber);
        /* enums.Direction direction = 3; */
        if (message.direction !== 0)
            writer.tag(3, WireType.Varint).int32(message.direction);
        /* int32 x_position = 4; */
        if (message.xPosition !== 0)
            writer.tag(4, WireType.Varint).int32(message.xPosition);
        /* int32 y_position = 5; */
        if (message.yPosition !== 0)
            writer.tag(5, WireType.Varint).int32(message.yPosition);
        /* int32 window_width = 6; */
        if (message.windowWidth !== 0)
            writer.tag(6, WireType.Varint).int32(message.windowWidth);
        /* int32 window_height = 7; */
        if (message.windowHeight !== 0)
            writer.tag(7, WireType.Varint).int32(message.windowHeight);
        /* int64 time = 8; */
        if (message.time !== 0n)
            writer.tag(8, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.MouseMoveRequest
 */
export const MouseMoveRequest = new MouseMoveRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MouseScrollRequest$Type extends MessageType<MouseScrollRequest> {
    constructor() {
        super("events.MouseScrollRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MouseScrollRequest>): MouseScrollRequest {
        const message = { accessToken: "", time: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MouseScrollRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MouseScrollRequest): MouseScrollRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int64 time */ 2:
                    message.time = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MouseScrollRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int64 time = 2; */
        if (message.time !== 0n)
            writer.tag(2, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.MouseScrollRequest
 */
export const MouseScrollRequest = new MouseScrollRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeystrokeRequest$Type extends MessageType<KeystrokeRequest> {
    constructor() {
        super("events.KeystrokeRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "question_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "key_char", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "shift", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "alt", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "control", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "meta", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "unrelated_key", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<KeystrokeRequest>): KeystrokeRequest {
        const message = { accessToken: "", questionNumber: 0, keyChar: "", shift: false, alt: false, control: false, meta: false, unrelatedKey: false, time: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeystrokeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeystrokeRequest): KeystrokeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 question_number */ 2:
                    message.questionNumber = reader.int32();
                    break;
                case /* string key_char */ 3:
                    message.keyChar = reader.string();
                    break;
                case /* bool shift */ 4:
                    message.shift = reader.bool();
                    break;
                case /* bool alt */ 5:
                    message.alt = reader.bool();
                    break;
                case /* bool control */ 6:
                    message.control = reader.bool();
                    break;
                case /* bool meta */ 7:
                    message.meta = reader.bool();
                    break;
                case /* bool unrelated_key */ 8:
                    message.unrelatedKey = reader.bool();
                    break;
                case /* int64 time */ 9:
                    message.time = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeystrokeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 question_number = 2; */
        if (message.questionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionNumber);
        /* string key_char = 3; */
        if (message.keyChar !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.keyChar);
        /* bool shift = 4; */
        if (message.shift !== false)
            writer.tag(4, WireType.Varint).bool(message.shift);
        /* bool alt = 5; */
        if (message.alt !== false)
            writer.tag(5, WireType.Varint).bool(message.alt);
        /* bool control = 6; */
        if (message.control !== false)
            writer.tag(6, WireType.Varint).bool(message.control);
        /* bool meta = 7; */
        if (message.meta !== false)
            writer.tag(7, WireType.Varint).bool(message.meta);
        /* bool unrelated_key = 8; */
        if (message.unrelatedKey !== false)
            writer.tag(8, WireType.Varint).bool(message.unrelatedKey);
        /* int64 time = 9; */
        if (message.time !== 0n)
            writer.tag(9, WireType.Varint).int64(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.KeystrokeRequest
 */
export const KeystrokeRequest = new KeystrokeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventReply$Type extends MessageType<EventReply> {
    constructor() {
        super("events.EventReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventReply>): EventReply {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventReply): EventReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message events.EventReply
 */
export const EventReply = new EventReply$Type();
/**
 * @generated ServiceType for protobuf service events.EventsService
 */
export const EventsService = new ServiceType("events.EventsService", [
    { name: "MouseClick", options: {}, I: MouseClickRequest, O: EventReply },
    { name: "MouseMove", options: {}, I: MouseMoveRequest, O: EventReply },
    { name: "MouseScroll", options: {}, I: MouseScrollRequest, O: EventReply },
    { name: "Keystroke", options: {}, I: KeystrokeRequest, O: EventReply }
]);
