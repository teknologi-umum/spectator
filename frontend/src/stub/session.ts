// @generated by protobuf-ts 2.1.0
// @generated from protobuf file "session.proto" (package "session", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Language } from "./enums";
import { Locale } from "./enums";
/**
 * @generated from protobuf message session.StartSessionRequest
 */
export interface StartSessionRequest {
    /**
     * @generated from protobuf field: enums.Locale locale = 1;
     */
    locale: Locale;
}
/**
 * @generated from protobuf message session.SetLocaleRequest
 */
export interface SetLocaleRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: enums.Locale locale = 2;
     */
    locale: Locale;
}
/**
 * @generated from protobuf message session.SessionReply
 */
export interface SessionReply {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
}
/**
 * @generated from protobuf message session.SubmitPersonalInfoRequest
 */
export interface SubmitPersonalInfoRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string student_number = 2;
     */
    studentNumber: string;
    /**
     * @generated from protobuf field: int32 years_of_experience = 3;
     */
    yearsOfExperience: number;
    /**
     * @generated from protobuf field: int32 hours_of_practice = 4;
     */
    hoursOfPractice: number;
    /**
     * @generated from protobuf field: string familiar_languages = 5;
     */
    familiarLanguages: string;
    /**
     * @generated from protobuf field: string wallet_number = 6;
     */
    walletNumber: string;
    /**
     * @generated from protobuf field: string wallet_type = 7;
     */
    walletType: string;
}
/**
 * @generated from protobuf message session.SubmitSAMRequest
 */
export interface SubmitSAMRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 aroused_level = 2;
     */
    arousedLevel: number;
    /**
     * @generated from protobuf field: int32 pleased_level = 3;
     */
    pleasedLevel: number;
}
/**
 * @generated from protobuf message session.Question
 */
export interface Question {
    /**
     * @generated from protobuf field: int32 question_number = 1;
     */
    questionNumber: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string instruction = 3;
     */
    instruction: string;
    /**
     * @generated from protobuf field: repeated session.Question.LanguageAndTemplate language_and_templates = 4;
     */
    languageAndTemplates: Question_LanguageAndTemplate[];
}
/**
 * @generated from protobuf message session.Question.LanguageAndTemplate
 */
export interface Question_LanguageAndTemplate {
    /**
     * @generated from protobuf field: enums.Language language = 1;
     */
    language: Language;
    /**
     * @generated from protobuf field: string template = 2;
     */
    template: string;
}
/**
 * @generated from protobuf message session.Exam
 */
export interface Exam {
    /**
     * @generated from protobuf field: int64 deadline = 1;
     */
    deadline: bigint;
    /**
     * @generated from protobuf field: repeated session.Question questions = 2;
     */
    questions: Question[];
    /**
     * @generated from protobuf field: repeated int32 answered_question_numbers = 3;
     */
    answeredQuestionNumbers: number[];
}
/**
 * @generated from protobuf message session.ExamResult
 */
export interface ExamResult {
    /**
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
    /**
     * @generated from protobuf field: repeated int32 answered_question_numbers = 2;
     */
    answeredQuestionNumbers: number[];
}
/**
 * @generated from protobuf message session.SubmissionRequest
 */
export interface SubmissionRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: int32 question_number = 2;
     */
    questionNumber: number;
    /**
     * @generated from protobuf field: enums.Language language = 3;
     */
    language: Language;
    /**
     * @generated from protobuf field: string solution = 4;
     */
    solution: string;
    /**
     * @generated from protobuf field: string scratch_pad = 5;
     */
    scratchPad: string;
    /**
     * @generated from protobuf field: string directives = 6;
     */
    directives: string;
}
/**
 * @generated from protobuf message session.TestResult
 */
export interface TestResult {
    /**
     * @generated from protobuf field: int32 test_number = 1;
     */
    testNumber: number;
    /**
     * @generated from protobuf oneof: result
     */
    result: {
        oneofKind: "passingTest";
        /**
         * @generated from protobuf field: session.TestResult.PassingTest passing_test = 2;
         */
        passingTest: TestResult_PassingTest;
    } | {
        oneofKind: "failingTest";
        /**
         * @generated from protobuf field: session.TestResult.FailingTest failing_test = 3;
         */
        failingTest: TestResult_FailingTest;
    } | {
        oneofKind: "compileError";
        /**
         * @generated from protobuf field: session.TestResult.CompileError compile_error = 4;
         */
        compileError: TestResult_CompileError;
    } | {
        oneofKind: "runtimeError";
        /**
         * @generated from protobuf field: session.TestResult.RuntimeError runtime_error = 5;
         */
        runtimeError: TestResult_RuntimeError;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message session.TestResult.PassingTest
 */
export interface TestResult_PassingTest {
}
/**
 * @generated from protobuf message session.TestResult.FailingTest
 */
export interface TestResult_FailingTest {
    /**
     * @generated from protobuf field: string expected_stdout = 2;
     */
    expectedStdout: string;
    /**
     * @generated from protobuf field: string actual_stdout = 3;
     */
    actualStdout: string;
}
/**
 * @generated from protobuf message session.TestResult.CompileError
 */
export interface TestResult_CompileError {
    /**
     * @generated from protobuf field: string stderr = 1;
     */
    stderr: string;
}
/**
 * @generated from protobuf message session.TestResult.RuntimeError
 */
export interface TestResult_RuntimeError {
    /**
     * @generated from protobuf field: string stderr = 1;
     */
    stderr: string;
}
/**
 * @generated from protobuf message session.SubmissionResult
 */
export interface SubmissionResult {
    /**
     * @generated from protobuf field: bool accepted = 1;
     */
    accepted: boolean;
    /**
     * @generated from protobuf field: repeated session.TestResult test_results = 2;
     */
    testResults: TestResult[];
}
/**
 * @generated from protobuf message session.EmptyRequest
 */
export interface EmptyRequest {
    /**
     * @generated from protobuf field: string access_token = 1;
     */
    accessToken: string;
}
/**
 * @generated from protobuf message session.EmptyReply
 */
export interface EmptyReply {
}
// @generated message type with reflection information, may provide speed optimized methods
class StartSessionRequest$Type extends MessageType<StartSessionRequest> {
    constructor() {
        super("session.StartSessionRequest", [
            { no: 1, name: "locale", kind: "enum", T: () => ["enums.Locale", Locale] }
        ]);
    }
    create(value?: PartialMessage<StartSessionRequest>): StartSessionRequest {
        const message = { locale: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartSessionRequest): StartSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* enums.Locale locale */ 1:
                    message.locale = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* enums.Locale locale = 1; */
        if (message.locale !== 0)
            writer.tag(1, WireType.Varint).int32(message.locale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.StartSessionRequest
 */
export const StartSessionRequest = new StartSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetLocaleRequest$Type extends MessageType<SetLocaleRequest> {
    constructor() {
        super("session.SetLocaleRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "locale", kind: "enum", T: () => ["enums.Locale", Locale] }
        ]);
    }
    create(value?: PartialMessage<SetLocaleRequest>): SetLocaleRequest {
        const message = { accessToken: "", locale: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetLocaleRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetLocaleRequest): SetLocaleRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* enums.Locale locale */ 2:
                    message.locale = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetLocaleRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* enums.Locale locale = 2; */
        if (message.locale !== 0)
            writer.tag(2, WireType.Varint).int32(message.locale);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SetLocaleRequest
 */
export const SetLocaleRequest = new SetLocaleRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionReply$Type extends MessageType<SessionReply> {
    constructor() {
        super("session.SessionReply", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SessionReply>): SessionReply {
        const message = { accessToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SessionReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionReply): SessionReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SessionReply
 */
export const SessionReply = new SessionReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitPersonalInfoRequest$Type extends MessageType<SubmitPersonalInfoRequest> {
    constructor() {
        super("session.SubmitPersonalInfoRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "student_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "years_of_experience", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hours_of_practice", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "familiar_languages", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "wallet_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "wallet_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubmitPersonalInfoRequest>): SubmitPersonalInfoRequest {
        const message = { accessToken: "", studentNumber: "", yearsOfExperience: 0, hoursOfPractice: 0, familiarLanguages: "", walletNumber: "", walletType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmitPersonalInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitPersonalInfoRequest): SubmitPersonalInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* string student_number */ 2:
                    message.studentNumber = reader.string();
                    break;
                case /* int32 years_of_experience */ 3:
                    message.yearsOfExperience = reader.int32();
                    break;
                case /* int32 hours_of_practice */ 4:
                    message.hoursOfPractice = reader.int32();
                    break;
                case /* string familiar_languages */ 5:
                    message.familiarLanguages = reader.string();
                    break;
                case /* string wallet_number */ 6:
                    message.walletNumber = reader.string();
                    break;
                case /* string wallet_type */ 7:
                    message.walletType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitPersonalInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* string student_number = 2; */
        if (message.studentNumber !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.studentNumber);
        /* int32 years_of_experience = 3; */
        if (message.yearsOfExperience !== 0)
            writer.tag(3, WireType.Varint).int32(message.yearsOfExperience);
        /* int32 hours_of_practice = 4; */
        if (message.hoursOfPractice !== 0)
            writer.tag(4, WireType.Varint).int32(message.hoursOfPractice);
        /* string familiar_languages = 5; */
        if (message.familiarLanguages !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.familiarLanguages);
        /* string wallet_number = 6; */
        if (message.walletNumber !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.walletNumber);
        /* string wallet_type = 7; */
        if (message.walletType !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.walletType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SubmitPersonalInfoRequest
 */
export const SubmitPersonalInfoRequest = new SubmitPersonalInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitSAMRequest$Type extends MessageType<SubmitSAMRequest> {
    constructor() {
        super("session.SubmitSAMRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "aroused_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "pleased_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SubmitSAMRequest>): SubmitSAMRequest {
        const message = { accessToken: "", arousedLevel: 0, pleasedLevel: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmitSAMRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitSAMRequest): SubmitSAMRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 aroused_level */ 2:
                    message.arousedLevel = reader.int32();
                    break;
                case /* int32 pleased_level */ 3:
                    message.pleasedLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitSAMRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 aroused_level = 2; */
        if (message.arousedLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.arousedLevel);
        /* int32 pleased_level = 3; */
        if (message.pleasedLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.pleasedLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SubmitSAMRequest
 */
export const SubmitSAMRequest = new SubmitSAMRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Question$Type extends MessageType<Question> {
    constructor() {
        super("session.Question", [
            { no: 1, name: "question_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "instruction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "language_and_templates", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Question_LanguageAndTemplate }
        ]);
    }
    create(value?: PartialMessage<Question>): Question {
        const message = { questionNumber: 0, title: "", instruction: "", languageAndTemplates: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Question>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Question): Question {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 question_number */ 1:
                    message.questionNumber = reader.int32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string instruction */ 3:
                    message.instruction = reader.string();
                    break;
                case /* repeated session.Question.LanguageAndTemplate language_and_templates */ 4:
                    message.languageAndTemplates.push(Question_LanguageAndTemplate.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Question, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 question_number = 1; */
        if (message.questionNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.questionNumber);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string instruction = 3; */
        if (message.instruction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.instruction);
        /* repeated session.Question.LanguageAndTemplate language_and_templates = 4; */
        for (let i = 0; i < message.languageAndTemplates.length; i++)
            Question_LanguageAndTemplate.internalBinaryWrite(message.languageAndTemplates[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.Question
 */
export const Question = new Question$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Question_LanguageAndTemplate$Type extends MessageType<Question_LanguageAndTemplate> {
    constructor() {
        super("session.Question.LanguageAndTemplate", [
            { no: 1, name: "language", kind: "enum", T: () => ["enums.Language", Language] },
            { no: 2, name: "template", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Question_LanguageAndTemplate>): Question_LanguageAndTemplate {
        const message = { language: 0, template: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Question_LanguageAndTemplate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Question_LanguageAndTemplate): Question_LanguageAndTemplate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* enums.Language language */ 1:
                    message.language = reader.int32();
                    break;
                case /* string template */ 2:
                    message.template = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Question_LanguageAndTemplate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* enums.Language language = 1; */
        if (message.language !== 0)
            writer.tag(1, WireType.Varint).int32(message.language);
        /* string template = 2; */
        if (message.template !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.template);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.Question.LanguageAndTemplate
 */
export const Question_LanguageAndTemplate = new Question_LanguageAndTemplate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Exam$Type extends MessageType<Exam> {
    constructor() {
        super("session.Exam", [
            { no: 1, name: "deadline", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "questions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Question },
            { no: 3, name: "answered_question_numbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Exam>): Exam {
        const message = { deadline: 0n, questions: [], answeredQuestionNumbers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Exam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Exam): Exam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 deadline */ 1:
                    message.deadline = reader.int64().toBigInt();
                    break;
                case /* repeated session.Question questions */ 2:
                    message.questions.push(Question.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 answered_question_numbers */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.answeredQuestionNumbers.push(reader.int32());
                    else
                        message.answeredQuestionNumbers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Exam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 deadline = 1; */
        if (message.deadline !== 0n)
            writer.tag(1, WireType.Varint).int64(message.deadline);
        /* repeated session.Question questions = 2; */
        for (let i = 0; i < message.questions.length; i++)
            Question.internalBinaryWrite(message.questions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 answered_question_numbers = 3; */
        if (message.answeredQuestionNumbers.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.answeredQuestionNumbers.length; i++)
                writer.int32(message.answeredQuestionNumbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.Exam
 */
export const Exam = new Exam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResult$Type extends MessageType<ExamResult> {
    constructor() {
        super("session.ExamResult", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "answered_question_numbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResult>): ExamResult {
        const message = { duration: 0n, answeredQuestionNumbers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExamResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResult): ExamResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                case /* repeated int32 answered_question_numbers */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.answeredQuestionNumbers.push(reader.int32());
                    else
                        message.answeredQuestionNumbers.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        /* repeated int32 answered_question_numbers = 2; */
        if (message.answeredQuestionNumbers.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.answeredQuestionNumbers.length; i++)
                writer.int32(message.answeredQuestionNumbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.ExamResult
 */
export const ExamResult = new ExamResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmissionRequest$Type extends MessageType<SubmissionRequest> {
    constructor() {
        super("session.SubmissionRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "question_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "language", kind: "enum", T: () => ["enums.Language", Language] },
            { no: 4, name: "solution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "scratch_pad", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "directives", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubmissionRequest>): SubmissionRequest {
        const message = { accessToken: "", questionNumber: 0, language: 0, solution: "", scratchPad: "", directives: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmissionRequest): SubmissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* int32 question_number */ 2:
                    message.questionNumber = reader.int32();
                    break;
                case /* enums.Language language */ 3:
                    message.language = reader.int32();
                    break;
                case /* string solution */ 4:
                    message.solution = reader.string();
                    break;
                case /* string scratch_pad */ 5:
                    message.scratchPad = reader.string();
                    break;
                case /* string directives */ 6:
                    message.directives = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* int32 question_number = 2; */
        if (message.questionNumber !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionNumber);
        /* enums.Language language = 3; */
        if (message.language !== 0)
            writer.tag(3, WireType.Varint).int32(message.language);
        /* string solution = 4; */
        if (message.solution !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.solution);
        /* string scratch_pad = 5; */
        if (message.scratchPad !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.scratchPad);
        /* string directives = 6; */
        if (message.directives !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.directives);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SubmissionRequest
 */
export const SubmissionRequest = new SubmissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestResult$Type extends MessageType<TestResult> {
    constructor() {
        super("session.TestResult", [
            { no: 1, name: "test_number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "passing_test", kind: "message", oneof: "result", T: () => TestResult_PassingTest },
            { no: 3, name: "failing_test", kind: "message", oneof: "result", T: () => TestResult_FailingTest },
            { no: 4, name: "compile_error", kind: "message", oneof: "result", T: () => TestResult_CompileError },
            { no: 5, name: "runtime_error", kind: "message", oneof: "result", T: () => TestResult_RuntimeError }
        ]);
    }
    create(value?: PartialMessage<TestResult>): TestResult {
        const message = { testNumber: 0, result: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestResult): TestResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 test_number */ 1:
                    message.testNumber = reader.int32();
                    break;
                case /* session.TestResult.PassingTest passing_test */ 2:
                    message.result = {
                        oneofKind: "passingTest",
                        passingTest: TestResult_PassingTest.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).passingTest)
                    };
                    break;
                case /* session.TestResult.FailingTest failing_test */ 3:
                    message.result = {
                        oneofKind: "failingTest",
                        failingTest: TestResult_FailingTest.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).failingTest)
                    };
                    break;
                case /* session.TestResult.CompileError compile_error */ 4:
                    message.result = {
                        oneofKind: "compileError",
                        compileError: TestResult_CompileError.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).compileError)
                    };
                    break;
                case /* session.TestResult.RuntimeError runtime_error */ 5:
                    message.result = {
                        oneofKind: "runtimeError",
                        runtimeError: TestResult_RuntimeError.internalBinaryRead(reader, reader.uint32(), options, (message.result as any).runtimeError)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 test_number = 1; */
        if (message.testNumber !== 0)
            writer.tag(1, WireType.Varint).int32(message.testNumber);
        /* session.TestResult.PassingTest passing_test = 2; */
        if (message.result.oneofKind === "passingTest")
            TestResult_PassingTest.internalBinaryWrite(message.result.passingTest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* session.TestResult.FailingTest failing_test = 3; */
        if (message.result.oneofKind === "failingTest")
            TestResult_FailingTest.internalBinaryWrite(message.result.failingTest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* session.TestResult.CompileError compile_error = 4; */
        if (message.result.oneofKind === "compileError")
            TestResult_CompileError.internalBinaryWrite(message.result.compileError, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* session.TestResult.RuntimeError runtime_error = 5; */
        if (message.result.oneofKind === "runtimeError")
            TestResult_RuntimeError.internalBinaryWrite(message.result.runtimeError, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.TestResult
 */
export const TestResult = new TestResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestResult_PassingTest$Type extends MessageType<TestResult_PassingTest> {
    constructor() {
        super("session.TestResult.PassingTest", []);
    }
    create(value?: PartialMessage<TestResult_PassingTest>): TestResult_PassingTest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestResult_PassingTest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestResult_PassingTest): TestResult_PassingTest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TestResult_PassingTest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.TestResult.PassingTest
 */
export const TestResult_PassingTest = new TestResult_PassingTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestResult_FailingTest$Type extends MessageType<TestResult_FailingTest> {
    constructor() {
        super("session.TestResult.FailingTest", [
            { no: 2, name: "expected_stdout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "actual_stdout", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestResult_FailingTest>): TestResult_FailingTest {
        const message = { expectedStdout: "", actualStdout: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestResult_FailingTest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestResult_FailingTest): TestResult_FailingTest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string expected_stdout */ 2:
                    message.expectedStdout = reader.string();
                    break;
                case /* string actual_stdout */ 3:
                    message.actualStdout = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestResult_FailingTest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string expected_stdout = 2; */
        if (message.expectedStdout !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.expectedStdout);
        /* string actual_stdout = 3; */
        if (message.actualStdout !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.actualStdout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.TestResult.FailingTest
 */
export const TestResult_FailingTest = new TestResult_FailingTest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestResult_CompileError$Type extends MessageType<TestResult_CompileError> {
    constructor() {
        super("session.TestResult.CompileError", [
            { no: 1, name: "stderr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestResult_CompileError>): TestResult_CompileError {
        const message = { stderr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestResult_CompileError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestResult_CompileError): TestResult_CompileError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stderr */ 1:
                    message.stderr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestResult_CompileError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stderr = 1; */
        if (message.stderr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stderr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.TestResult.CompileError
 */
export const TestResult_CompileError = new TestResult_CompileError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestResult_RuntimeError$Type extends MessageType<TestResult_RuntimeError> {
    constructor() {
        super("session.TestResult.RuntimeError", [
            { no: 1, name: "stderr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestResult_RuntimeError>): TestResult_RuntimeError {
        const message = { stderr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TestResult_RuntimeError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestResult_RuntimeError): TestResult_RuntimeError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stderr */ 1:
                    message.stderr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestResult_RuntimeError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stderr = 1; */
        if (message.stderr !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stderr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.TestResult.RuntimeError
 */
export const TestResult_RuntimeError = new TestResult_RuntimeError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmissionResult$Type extends MessageType<SubmissionResult> {
    constructor() {
        super("session.SubmissionResult", [
            { no: 1, name: "accepted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "test_results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TestResult }
        ]);
    }
    create(value?: PartialMessage<SubmissionResult>): SubmissionResult {
        const message = { accepted: false, testResults: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubmissionResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmissionResult): SubmissionResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool accepted */ 1:
                    message.accepted = reader.bool();
                    break;
                case /* repeated session.TestResult test_results */ 2:
                    message.testResults.push(TestResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmissionResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool accepted = 1; */
        if (message.accepted !== false)
            writer.tag(1, WireType.Varint).bool(message.accepted);
        /* repeated session.TestResult test_results = 2; */
        for (let i = 0; i < message.testResults.length; i++)
            TestResult.internalBinaryWrite(message.testResults[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.SubmissionResult
 */
export const SubmissionResult = new SubmissionResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmptyRequest$Type extends MessageType<EmptyRequest> {
    constructor() {
        super("session.EmptyRequest", [
            { no: 1, name: "access_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EmptyRequest>): EmptyRequest {
        const message = { accessToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmptyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyRequest): EmptyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmptyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string access_token = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.EmptyRequest
 */
export const EmptyRequest = new EmptyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EmptyReply$Type extends MessageType<EmptyReply> {
    constructor() {
        super("session.EmptyReply", []);
    }
    create(value?: PartialMessage<EmptyReply>): EmptyReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EmptyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmptyReply): EmptyReply {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EmptyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session.EmptyReply
 */
export const EmptyReply = new EmptyReply$Type();
/**
 * @generated ServiceType for protobuf service session.SessionService
 */
export const SessionService = new ServiceType("session.SessionService", [
    { name: "StartSession", options: {}, I: StartSessionRequest, O: SessionReply },
    { name: "SetLocale", options: {}, I: SetLocaleRequest, O: EmptyReply },
    { name: "SubmitPersonalInfo", options: {}, I: SubmitPersonalInfoRequest, O: EmptyReply },
    { name: "SubmitBeforeCodeSAM", options: {}, I: SubmitSAMRequest, O: EmptyReply },
    { name: "StartExam", options: {}, I: EmptyRequest, O: Exam },
    { name: "ResumeExam", options: {}, I: EmptyRequest, O: Exam },
    { name: "EndExam", options: {}, I: EmptyRequest, O: ExamResult },
    { name: "SubmitSolution", options: {}, I: SubmissionRequest, O: SubmissionResult },
    { name: "SubmitAfterCodeSAM", options: {}, I: SubmitSAMRequest, O: EmptyReply }
]);
