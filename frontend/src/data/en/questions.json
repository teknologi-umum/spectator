{
  "questions": [
    {
      "id": 1,
      "question": "You've been given a task to prevent a star from falling down to earth. Wait,\nhow would you do that? Simply create a function that will print the lyrics of a\nsong called twinkle twinkle little star but by only using 2 variables. If you\ndo more than that or less than that, the star will fall, the world will end,\nand everybody will blame you.\n\n**Expected output:**\n```\nTwinkle twinkle little star\nHow I wonder what you are\nUp above the world so high\nLike a diamond in the sky\nTwinkle twinkle little star\nHow I wonder what you are\n```\n\n**Pseudocode example:**\n```\ndefn printLyrics()\n  lyric1 = some lyrics goes here\n  lyric2 = the rest of the lyrics goes here\n  print(lyric1)\n  print(lyric2)\nend\n```\n\nVery easy, right? You should be able to do it less than 5 minutes.\n",
      "title": "Twinkle Twinkle Little Star",
      "templates": {
        "c": "void printLyrics() {\n    // write your code here\n}",
        "cpp": "void printLyrics() {\n    // write your code here\n}",
        "java": "class Lyrics {\n    public void printLyrics() {\n        // write your code here\n    }\n}",
        "javascript": "function printLyrics() {\n    // write your code here\n}",
        "php": "function printLyrics() {\n    // write your code here\n}",
        "python": "def printLyrics() -> None:\n    // write your code here"
      }
    },
    {
      "id": 2,
      "question": "Great! If you've arrived here. That means you've successfully prevented\nthe star from falling down to earth. Wait a minute, the atmosphere\nsuddenly feels cold. Oh shoot, apparently the shooting star broke the\nearth's atmosphere and the temperature dropped quickly.\n\nSince you're a curious person, you decided to find how much the\ntemperature has dropped in Celcius, Fahrenheit, and Kelvin. Of course,\nsince you're a smart person you don't want to calculate it manually. You\ndecided to make a program to calculate them for you.\n\nYour current task is figure out how to convert a given temperature and find its\nequivalent in other units. Should be easy enough, right?\n\n**Input:**\n```\ncalculateTemperature(100, \"Celcius\", \"Fahrenheit\")\ncalculateTemperature(212, \"Fahrenheit\", \"Kelvin\")\n```\n\n**Expected output:**\n```\n212\n373\n```\n\n**Pseudocode example:**\n```\ndefn calculateTemperature(temperature, from, to)\n  if (from == \"celcius\") and (to == \"fahrenheit\") then\n    return celcius -> fahrenheit\n  else if (from == \"fahrenheit\") and (to == \"celcius\") then\n    return fahrenheit -> celcius\n  ...\nend\n```\n\n**Constraints:**\n  - The input is always an integer\n  - The input will never exceeds 1000\n  - The input will never be negative\n\nGood luck!\n",
      "title": "Temperature Converter",
      "templates": {
        "c": "int calculateTemperature(int temp, char* from, char* to) {\n    // write your code here\n}",
        "cpp": "#include <stdio.h>\n\nint calculateTemperature(int temp, std::string from, std::string to) {\n    // write your code here\n}",
        "java": "class Temperature {\n    public void calculateTemperature(int temp, String from, String to) {\n        // write your code here\n    }\n}",
        "javascript": "function calculateTemperature(temp, from, to) {\n    // write your code here\n}",
        "php": "function calculateTemperature(int temp, string from, string to): int {\n    // write your code here\n}",
        "python": "def calculateTemperature(temp: int, from: str, to: str) -> int:\n    // write your code here"
      }
    },
    {
      "id": 3,
      "question": "Great! You've made a program to convert temperatures to other units. Since\nyou're a curious person, you think to yourself, why are there different units\nfor temperature. Obviously their value won't be the same because they're in\ndifferent unit, but just to make sure, you decided to make a program which\ncompares if 2 temperatures are the same or not.\n\nYour task now is to create a function to make sure that 2 values are indeed\ndifferent. It will return either `true` or `false`. Here's an example:\n\n**Input:**\n```\nisSameNumber(100, 212)\nisSameNumber(212, 373)\nisSameNumber(373, 100)\n```\n\n\n**Expected output:**\n```\nfalse\nfalse\nfalse\n```\n\n**Pseudocode example:**\n```\ndefn isSameNumber(a, b)\n  if a is equal to b then\n    return true\n  otherwise\n    return false\nend\n```\n\n**Constraints:**\n  - The input is always an integer\n\nGood luck!\n",
      "title": "Check similar number",
      "templates": {
        "c": "int isSameNumber(int a, int b) {\n    return |\n}\n",
        "cpp": "int isSameNumber(int a, int b) {\n    return |\n}\n",
        "java": "class SimilarNumber {\n    public boolean isSameNumber(int a, int b) {\n        |\n    }\n}\n",
        "javascript": "function isSameNumber(a, b) {\n    return |\n}\n",
        "php": "function isSameNumber(int a, int b) {\n    return |\n}\n",
        "python": "def isSameNumber(a: int, b: int) -> bool:\n    // write your code here"
      }
    },
    {
      "id": 4,
      "question": "Nice, you've converted the temperatures and made sure they're different\nfrom each other. You should have 3 numbers with you (Celcius,\nFahrenheit, Kelvin). Since the temperature is freezing, you decided to\nturn on the room heater. One issue though, you don't know how much power\nneeded to turn on the heater.\n\nYour task is now to find the power needed to turn on the room heater.\nYou can find it by simply calculating the sum of the digits of the\nprevious temperatures combined.\n\n**Suppose you have these numbers:**\n  - Celcius = 100\n  - Fahrenheit = 212\n  - Kelvin = 373\n\nThen the input will be 100212373 (100 + 212 + 373). The sum of the input is as\nsimple as adding them all. For example: `1 + 0 + 0 + 2 + 1 + 2 + 3 + 7 + 3` so\nthe final result will be 19. Don't print the number, return it instead.\n\n**Input:**\n```\nfindHeaterPower(100212373)\n```\n\n**Expected output:**\n```\n19\n```\n\n**Pseudocode example:**\n```\ndefn findHeaterPower(input)\n  result = sum(digits of input)\n  return result\nend\n```\n\n**Constraints:**\n  - The input will never exceeds 2147483647\n  - The input will never be negative\n\nThat's it. Good luck and have fun!\n",
      "title": "Sum all digits of integers",
      "templates": {
        "c": "int findHeaterPower(int input) {\n    // write your code here\n}",
        "cpp": "int findHeaterPower(int input) {\n    // write your code here\n}",
        "java": "class Heater {\n    public int findHeaterPower(int input) {\n        // write your code here\n    }\n}",
        "javascript": "function findHeaterPower(input) {\n    // write your code here\n}",
        "php": "function findHeaterPower(int input): int {\n    // write your code here\n}",
        "python": "def findHeaterPower(input: int) -> int:\n    // write your code here"
      }
    },
    {
      "id": 5,
      "question": "Great, if you're here then you must've found the power needed to turn on\nthe heater, but here's the problem. You don't think it's warm enough. You\ngot furious and starts spouting non sense. Q-Aa-Bbb-Ffff-Nnnnnn, or something\nalong those lines.\n\nAfter a moment, you -- for some weird reason -- recognise a pattern in your\nnonsense mumbling. You decided to make an program to generate the same\nmumbling that you were saying based on some random alphabet because you have\nnothing better to do. No time to explain, you should be able to recognise the\npattern by yourself.\n\n**Input:**\n\n```\nmumble(\"QwertY\")\nmumble(\"bruh\")\nmumble(\"asdfb\")\n```\n\n\n**Expected output:**\n```\nQ-Ww-Eee-Rrrr-Ttttt-Yyyyyy\nB-Rr-Uuu-Hhhh\nA-Ss-Ddd-Ffff-Bbbb\n```\n",
      "title": "Mumbling",
      "templates": {
        "c": "void mumble() {\n    // write your code here\n}",
        "cpp": "void mumble() {\n    // write your code here\n}",
        "java": "class Mumble {\n    public void mumble() {\n        // write your code here\n    }\n}",
        "javascript": "function mumble() {\n    // write your code here\n}\n",
        "php": "function mumble() {\n    // write your code here\n}",
        "python": "def mumble() -> None:\n    // write your code here"
      }
    },
    {
      "id": 6,
      "question": "Great, now into the final question. You need to help me decide how to do the\nscoring for this coding challenge (you know, that one that you've been doing\nfor the past 90 minutes or so). Here are the rules that you need to consider\nwhen making a program to automagically do the hard work for you.\n\n- Every student receives a grade in the inclusive range from 0 to 100.\n- Any grade less than 40 is a failing grade.\n- If the difference between the grade and the next multiple of 5 is less than 3, round the grade up to the next multiple of 5.\n- If the value of the grade is less than 38, no rounding occurs as the result will still be a failing grade.\n\nI'll give you some examples:\n\n**Input:**\n```\ncalculateGrade(73)\ncalculateGrade(38)\ncalculateGrade(84)\ncalculateGrade(32)\ncalculateGrade(69)\n```\n\n\n**Expected output:**\n```\n75\n40\n85\n32\n70\n```\n\n**Constraints:**\n  - The input is always a 32bit unsigned integer\n",
      "title": "Grade System",
      "templates": {
        "c": "#include <stdint.h>\n\nvoid calculateGrade(uint32_t grade) {\n    // write your code here\n}",
        "cpp": "#include <stdint.h>\n\nvoid calculateGrade(uint32_t grade) {\n    // write your code here\n}",
        "java": "class Grade {\n    public void calculateGrade(int grade) {\n        // write your code here\n    }\n}",
        "javascript": "function calculateGrade(grade) {\n    // write your code here\n}",
        "php": "function calculateGrade(int grade) {\n    // write your code here\n}",
        "python": "def calculateGrade(grade: int) -> int:\n    // write your code here"
      }
    }
  ]
}
